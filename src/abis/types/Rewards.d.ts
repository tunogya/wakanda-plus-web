/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardsInterface extends ethers.utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "claimReward(address,uint256)": FunctionFragment;
    "createPromotion(uint64,uint256,uint48,uint8)": FunctionFragment;
    "destroyPromotion(uint256,address)": FunctionFragment;
    "endPromotion(uint256,address)": FunctionFragment;
    "extendPromotion(uint256,uint8)": FunctionFragment;
    "getCurrentEpochId(uint256)": FunctionFragment;
    "getPromotion(uint256)": FunctionFragment;
    "getRewardsAmount(address,uint256,uint8[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPromotion",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyPromotion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endPromotion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "extendPromotion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAmount",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PromotionCreated(uint256)": EventFragment;
    "PromotionDestroyed(uint256,address)": EventFragment;
    "PromotionEnded(uint256,address,uint8)": EventFragment;
    "PromotionExtended(uint256,uint256)": EventFragment;
    "RewardsClaimed(uint256,uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PromotionCreatedEvent = TypedEvent<
  [BigNumber] & { promotionId: BigNumber }
>;

export type PromotionDestroyedEvent = TypedEvent<
  [BigNumber, string] & { promotionId: BigNumber; recipient: string }
>;

export type PromotionEndedEvent = TypedEvent<
  [BigNumber, string, number] & {
    promotionId: BigNumber;
    recipient: string;
    epochNumber: number;
  }
>;

export type PromotionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber] & { promotionId: BigNumber; numberOfEpochs: BigNumber }
>;

export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, number, string, BigNumber] & {
    promotionId: BigNumber;
    epochId: number;
    user: string;
    amount: BigNumber;
  }
>;

export class Rewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsInterface;

  functions: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    claimReward(
      _user: string,
      _promotionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPromotion(
      _startTimestamp: BigNumberish,
      _tokensPerEpoch: BigNumberish,
      _epochDuration: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendPromotion(
      _promotionId: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentEpochId(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPromotion(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number, BigNumber, BigNumber] & {
          startTimestamp: BigNumber;
          numberOfEpochs: number;
          epochDuration: number;
          createdAt: number;
          tokensPerEpoch: BigNumber;
          rewardsClaimed: BigNumber;
        }
      ]
    >;

    getRewardsAmount(
      _user: string,
      _promotionId: BigNumberish,
      _epochIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

  claimReward(
    _user: string,
    _promotionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPromotion(
    _startTimestamp: BigNumberish,
    _tokensPerEpoch: BigNumberish,
    _epochDuration: BigNumberish,
    _numberOfEpochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyPromotion(
    _promotionId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endPromotion(
    _promotionId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendPromotion(
    _promotionId: BigNumberish,
    _numberOfEpochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentEpochId(
    _promotionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPromotion(
    _promotionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, BigNumber, BigNumber] & {
      startTimestamp: BigNumber;
      numberOfEpochs: number;
      epochDuration: number;
      createdAt: number;
      tokensPerEpoch: BigNumber;
      rewardsClaimed: BigNumber;
    }
  >;

  getRewardsAmount(
    _user: string,
    _promotionId: BigNumberish,
    _epochIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

    claimReward(
      _user: string,
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPromotion(
      _startTimestamp: BigNumberish,
      _tokensPerEpoch: BigNumberish,
      _epochDuration: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroyPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extendPromotion(
      _promotionId: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentEpochId(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotion(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, BigNumber, BigNumber] & {
        startTimestamp: BigNumber;
        numberOfEpochs: number;
        epochDuration: number;
        createdAt: number;
        tokensPerEpoch: BigNumber;
        rewardsClaimed: BigNumber;
      }
    >;

    getRewardsAmount(
      _user: string,
      _promotionId: BigNumberish,
      _epochIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PromotionCreated(uint256)"(
      promotionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { promotionId: BigNumber }>;

    PromotionCreated(
      promotionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { promotionId: BigNumber }>;

    "PromotionDestroyed(uint256,address)"(
      promotionId?: BigNumberish | null,
      recipient?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { promotionId: BigNumber; recipient: string }
    >;

    PromotionDestroyed(
      promotionId?: BigNumberish | null,
      recipient?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { promotionId: BigNumber; recipient: string }
    >;

    "PromotionEnded(uint256,address,uint8)"(
      promotionId?: BigNumberish | null,
      recipient?: string | null,
      epochNumber?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { promotionId: BigNumber; recipient: string; epochNumber: number }
    >;

    PromotionEnded(
      promotionId?: BigNumberish | null,
      recipient?: string | null,
      epochNumber?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { promotionId: BigNumber; recipient: string; epochNumber: number }
    >;

    "PromotionExtended(uint256,uint256)"(
      promotionId?: BigNumberish | null,
      numberOfEpochs?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { promotionId: BigNumber; numberOfEpochs: BigNumber }
    >;

    PromotionExtended(
      promotionId?: BigNumberish | null,
      numberOfEpochs?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { promotionId: BigNumber; numberOfEpochs: BigNumber }
    >;

    "RewardsClaimed(uint256,uint8,address,uint256)"(
      promotionId?: BigNumberish | null,
      epochId?: null,
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber],
      {
        promotionId: BigNumber;
        epochId: number;
        user: string;
        amount: BigNumber;
      }
    >;

    RewardsClaimed(
      promotionId?: BigNumberish | null,
      epochId?: null,
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, number, string, BigNumber],
      {
        promotionId: BigNumber;
        epochId: number;
        user: string;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _user: string,
      _promotionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPromotion(
      _startTimestamp: BigNumberish,
      _tokensPerEpoch: BigNumberish,
      _epochDuration: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendPromotion(
      _promotionId: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentEpochId(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotion(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(
      _user: string,
      _promotionId: BigNumberish,
      _epochIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _user: string,
      _promotionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPromotion(
      _startTimestamp: BigNumberish,
      _tokensPerEpoch: BigNumberish,
      _epochDuration: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endPromotion(
      _promotionId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendPromotion(
      _promotionId: BigNumberish,
      _numberOfEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentEpochId(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotion(
      _promotionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAmount(
      _user: string,
      _promotionId: BigNumberish,
      _epochIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
